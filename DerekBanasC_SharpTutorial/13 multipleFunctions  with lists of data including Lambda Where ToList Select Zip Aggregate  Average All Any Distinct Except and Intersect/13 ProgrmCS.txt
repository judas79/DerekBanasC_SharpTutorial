/*
This time I’ll cover multiple functions you can use to work with lists of data including Lambda, Where, ToList, Select, Zip, Aggregate Average All Any Distinct Except and Intersect
*/


// using directives, Libraries containing functions and objects
using System;
// use dictionaries
using System.Collections.Generic;
// use list arrays
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // This time I'll cover multiple functions 
    // you can use to work with lists of data
    // including Lambda, Where, ToList, Select,
    // Zip, Aggregate and Average

    class Program
    {
        // Delegate that is assigned a Lambda
        // expression, passes in double and a value
        delegate double doubleIt(double val);

        static void Main(string[] args)
        {
            //--------- Lambda ---------
            // Like we did with predicates earlier
            // Lambda expressions allow you to 
            // use anonymous methods that define
            // the input parameters on the left 
            // and the code to execute on the right

            // Assign a Lambda to the delegate
            // the lambda declaration operator => 
            // to separate the lambda's parameter list from its body
            doubleIt dblIt = x => x * 2;
            Console.WriteLine($"5 * 2 = {dblIt(5)}");

            doubleIt trplIt = x => x * x * x;
            Console.WriteLine($"x=3; x * x *x = {trplIt(3)}\n");

            // ---------- Where ---------
            // You don't have to use delegates though
            // Here we'll search through a list to 
            // find all the even numbers
            List<int> numList = new List<int> { 1, 9, 2, 6, 3 };

            // Put the number in the list if the 
            // condition is true
            // refer to numList then Where (if true) that value a (in numList) 
            // divided by 2 is equal to 0, converted to a list.
            var evenList = numList.Where(a => a % 2 == 0).ToList();
            foreach (var j in evenList)
                Console.WriteLine($"Even numbers: {j}");
            var oddList = numList.Where(o => o % 2 != 0);
            foreach (var j in oddList)
                Console.WriteLine($"Odd numbers: {j}");

            // Add values in a range to a list
            var rangeList = numList.Where(x => (x > 2) && (x < 9)).ToList();
            foreach (var k in rangeList)
                Console.WriteLine($"range of (x > 2) && (x < 9) : {k}");
            Console.WriteLine();

            var rangeList2 = numList.Where(x => (x < 9) && (x > 3)).ToList();
            foreach (var k in rangeList2)
                Console.WriteLine($"range of  (x < 9) && (x > 3) : {k}");
                Console.WriteLine();
            
            // Find the number of heads and tails in
            // a list 1 = H, 2 = T

            // Generate our list
            List<int> flipList = new List<int>();
            int i = 0;
            Random rnd = new Random();
            while (i < 100)
            {
                flipList.Add(rnd.Next(1, 3));
                i++;
            }

            // Print out the heads and tails
            Console.WriteLine("Heads : {0}",
                flipList.Where(a => a == 1).ToList().Count());
            Console.WriteLine("Tails : {0}",
                flipList.Where(a => a == 2).ToList().Count());

            var rockPaperScissors = new List<int>();
            i = 0;
            while (i < 12)
            {
                rockPaperScissors.Add(rnd.Next(1, 4));
                i++;
            }
            Console.WriteLine("Rock : {0}", rockPaperScissors.Where(a => a == 1).ToList().Count());
            Console.WriteLine("Paper : {0}", rockPaperScissors.Where(a => a == 2).ToList().Count());
            Console.WriteLine("Scissors : {0}", rockPaperScissors.Where(a => a == 3).ToList().Count());


            //-------------- StartsWith EndsWith -------------

            // Find all names starting with s
            var nameList = new List<string> { "Doug-e", "Sally", "Sue" };

            var sNameList = nameList.Where(x => x.StartsWith("S"));

            foreach (var m in sNameList)
                Console.WriteLine(m);

            var sNameList2 = nameList.Where(x => x.EndsWith("e"));
            foreach (var e in sNameList2)              
                Console.WriteLine($"name ends with 'e' : {e}");
            Console.WriteLine();


            // ---------- SELECT ----------
            // Select allows us to execute a function 
            // on each item in a list

            // Generate a list from 1 to 10
            var oneTo10 = new List<int>();
            oneTo10.AddRange(Enumerable.Range(1, 10));

            var squares = oneTo10.Select(x => x * x);

            foreach (var l in squares)
                Console.WriteLine(l);

            var oneTo5 = new List<String> { "S", "B", "K", "D", "P" };
            var endInIng = oneTo5.Select(x => x + "ing");
            foreach (var ing in endInIng)
                Console.WriteLine($"words that end with ing : {ing}");
            Console.WriteLine();

            // ---------- ZIP ----------
            // Zip applies a function to two lists 
            // Add values in 2 lists together
            var listOne = new List<int>(new int[] { 1, 3, 4 });
            var listTwo = new List<int>(new int[] { 4, 6, 8 });

            var sumList = listOne.Zip(listTwo, (x, y) => x + y).ToList();

            foreach (var n in sumList)
                Console.WriteLine(n);

            i = 0;
            var listThree = new List<int>(new int[] { 0, 2, 5 });
            var listFour = new List<int>(new int[] { 7, 9, 10 });
            var multList = listThree.Zip(listFour, (x, y) => x * y).ToList();
            foreach (var m in multList)
            {
                Console.WriteLine($"{listThree[i]} * {listFour[i]} = {m}");
                i++;
            }
            /* DOESN'T WORK
            i = 0;
            var ranList1 = new List<int>(new int[39]);
            var ranList2 = new List<int>(new int[39]);
            while (i < 40)
            {
                ranList1.Add(rnd.Next(11, 50));
                ranList2.Add(rnd.Next(21, 60));
                i++;
            }
            var ranList = new List<int>(new int[39]);
            ranList = ranList1.Zip(ranList2, (x, y) => x * y).ToList();
            // Print out the random products
            foreach (var z in ranList)
            {
                Console.WriteLine($"{ranList1[i]} * {ranList2[i]} = z");
                i++;
            }
            */
            Console.WriteLine();


            // ---------- AGGREGATE ----------
            // Aggregate performs an operation on 
            // each item in a list and carries the 
            // results forward 

            // Sum values in a list
            var numList2 = new List<int>() { 1, 2, 3, 4, 5 };
            Console.WriteLine("Sum : {0}",
                numList2.Aggregate((a, b) => a + b));

            var numberList = new List<double>() { 1.1, 2.2, 3.3, 4.4 };
            Console.Write("Prouct Aggregate : {0} For numbers: ", numberList.Aggregate((a, b) => a * b));
            foreach (var a in numberList)
            {
                Console.Write($" {a}, ");
            }
            Console.WriteLine("\n");

            // ---------- AVERAGE using AsQueryable ----------
            // Get the average of a list of values
            var numList3 = new List<int>() { 1, 2, 3, 4, 5 };

            // AsQueryable allows you to manipulate the
            // collection with the Average function
            Console.WriteLine("AVG : {0}",
                numList3.AsQueryable().Average());

            // using numberList above in Aggregate
            Console.Write("AsQuerable().Average() of :");
            foreach (var a in numberList)
            {
                Console.Write($" {a}, ");
            }
            Console.WriteLine($"Is : {numberList.AsQueryable().Average()}\n");

            // ---------- ALL ----------
            // Determines if all items in a list
            // meet a condition
            var numList4 = new List<int>() { 1, 2, 3, 4, 5 };

            Console.WriteLine("All > 3 : {0}",
                numList4.All(x => x > 3));

            Console.WriteLine($"All >= 1 : {numList4.All(x=> x>=1)}\n");

            // ---------- ANY ----------
            // Determines if any items in a list
            // meet a condition
            var numList5 = new List<int>() { 1, 2, 3, 4, 5 };

            Console.WriteLine("Any > 3 : {0}",
                numList5.Any(x => x > 3));

            Console.WriteLine($"Any >= 6 : {numList4.Any(x => x >= 6)}\n");

            // ---------- DISTINCT string.Join() ----------
            // Eliminates duplicates from a list
            var numList6 = new List<int>() { 1, 2, 3, 2, 3 };

            Console.Write($"Not sorted list : ");
            foreach (var d in numList6)
                Console.Write($", {d}");
            Console.WriteLine("\nDistinct : {0}",
                string.Join(", ", numList6.Distinct()));
            Console.WriteLine();

            // ---------- EXCEPT string.Join() ----------
            // Receives 2 lists and returns values not
            // found in the 2nd list
            var numList7 = new List<int>() { 1, 2, 3, 2, 3 };
            var numList8 = new List<int>() { 3 };

            Console.WriteLine("Except : {0}",
                string.Join(", ", numList7.Except(numList8)));

            var numList8a = new List<int>() { 1, 3 };
            Console.WriteLine($"first list  1, 2, 3, 2, 3; second list 3; third list 1, 3: \n(Except) not members of all three lists  : " +
                $"{string.Join(", ", numList7.Except(numList8a).Except(numList8))} \n");

            // ---------- INTERSECT string.Join() ----------
            // Receives 2 lists and returns values that
            // both lists have
            var numList9 = new List<int>() { 1, 2, 3, 2, 3 };
            var numList10 = new List<int>() { 2, 3 };

            Console.WriteLine("Intersect : {0}",
                string.Join(", ", numList9.Intersect(numList10)));

            var numList10a = new List<int>() { 2, 3, 4 };
            Console.WriteLine($"second list 2,3,4; first list  1, 2, 3, 2, 3; third list  2, 3, 4; \nIntersect of all three lists : " +
                $"{string.Join(", ", numList10.Intersect(numList10a).Intersect(numList9))} \n");

            Console.ReadLine();

        }

    }

}
