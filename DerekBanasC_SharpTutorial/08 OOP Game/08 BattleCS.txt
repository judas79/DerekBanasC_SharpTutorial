/*
In this part of my C# tutorial series we will make a fun little game. I’m going to show how to create 2 warriors that will fight to the death in a simulated battle. 
More complex video games follow many of the techniques we cover in this video. It also will show how awesome object oriented programming is in that it gives you the 
ability to model just about any real world object, or interaction.
*/



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DerekBanasC_SharpTutorial
{
    class Battle
    {
        // since a battle is an occurance and not an object...
        // This is a utility class so it makes sense
        // to have all methods be static
 
        // Recieve both Warrior objects
        public static void StartFight(Warrior warrior1,
            Warrior warrior2)
        {
            // Loop giving each Warrior a chance to attack
            // and block each turn until 1 dies
            while (true)
            {
                // condition to throw us out of the while statement if warrior 1 wins
                if (GetAttackResult(warrior1, warrior2) == "Game Over")
                {
                    Console.WriteLine("Game Over");
                    break;
                }

                // condition to throw us out of the while statement if warrior 2 wins
                if (GetAttackResult(warrior2, warrior1) == "Game Over")
                {
                    Console.WriteLine("Game Over");
                    break;
                }
            }
        }
 
        // Accept 2 Warriors
        // warriors a and b not to be confused with warriors 1 and 2
        // its a string because it returns "game over"
        public static string GetAttackResult(Warrior warriorA,
            Warrior warriorB)
        {
            // Calculate one Warriors attack and the others block
            // from random attack and block amounts
            double warAAttkAmt = warriorA.Attack();
            double warBBlkAmt = warriorB.Block();
 
            // Subtract block from attack
            double dmg2WarB = warAAttkAmt - warBBlkAmt;
 
            // If there was damage subtract that from the health
            if (dmg2WarB > 0)
            {
                warriorB.Health = warriorB.Health - dmg2WarB;
            }
            // negative damage or 0 damage it will be 0, so health doesn't go up do to negative damage
            else dmg2WarB = 0;
 
            // Print out info on who attacked who and for how
            // much damage
            Console.WriteLine("{0} Attacks {1} and Deals {2} Damage",
                warriorA.Name,
                warriorB.Name,
                dmg2WarB);
 
            // Provide output on the change to health
            Console.WriteLine("{0} Has {1} Health\n",
                warriorB.Name,
                warriorB.Health);
 
            // Check if the warriors health fell below
            // zero and if so print a message and send
            // a response that will end the loop
            if (warriorB.Health <= 0)
            {
                Console.WriteLine("{0} has Died and {1} is Victorious\n",
                    warriorB.Name,
                    warriorA.Name);
 
                return "Game Over";
            }
            else return "Fight Again";
        }
    }
}
