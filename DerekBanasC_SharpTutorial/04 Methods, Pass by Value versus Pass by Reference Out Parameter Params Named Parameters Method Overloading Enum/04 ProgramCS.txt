/*
Methods, Pass by Value versus Pass by Reference Out Parameter Params Named Parameters Method Overloading Enum and much more.
*/

// Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    class Program
    {
        // this is where all the execution starts (begins)
        // static means function belongs to this class, and can be executed without having a object
        // void means no returned value, if int instead of void, int returns 1 for successful execution or -1 if not
        // string array values can be passed in as args, arrays are boxes containing values
        static void Main(string[] args)
        {
            // By default values are passed into a method with no reference to the variable itself
            // changes within a method will not change variable values outside of the method
            // ----- PASSING BY VALUE -----
            int x = 5;
            int y = 4;

            Console.WriteLine("5 + 4 = {0}",
                GetSum(x, y));

            // Even though the value for x and y changed in 
            // method it remains unchanged here
            Console.WriteLine("x = {0}, y = {1}",
                x, y);



            // ----- OUT PARAMETER -----
            // You can pass a variable as an output 
            // variable even without assigning a
            // value to it
            int solution;

            // A parameter passed with out has its
            // value assigned in the method
            DoubleIt(15, out solution);

            Console.WriteLine("15 * 2 = {0}",
                solution);

            // NOT IN LESSON
            int solution2;
            int iSolution = solution;
            TripleIt(iSolution, out solution2);
            Console.WriteLine("iSolution * 3 = {0}",
                solution2);




            // ----- PASS BY REFERENCE -----
            int num1 = 10;
            int num2 = 20;

            Console.WriteLine("Before Swap num1 : {0} num2 : {1}", num1, num2);

            Swap(ref num1, ref num2);

            Console.WriteLine("After Swap num1 : {0} num2 : {1}", num1, num2);




            // ----- PARAMS (Parameters)-----
            // You are able to pass a variable amount
            // of data of the same data type into a 
            // method using params. You can also pass
            // in an array. 
            Console.WriteLine("1 + 2 + 3 = {0}",
                GetSumMore(1, 2, 3));



            // ----- NAMED PARAMETERS NOT IN ORDER -----
            // You can pass values in any order if
            // you used named parameters
            PrintInfo(zipCode: 15147,
                name: "Derek Banas");




            // ----- METHOD OVERLOADING pASSING DOUBLES AND STRING-----
            // You can define methods with the same 
            // name that will be called depending on
            // what data is sent automatically
            Console.WriteLine("5.0 + 4.0 = {0}",
                GetSum(5.0, 4.5));

            Console.WriteLine("5 + 4 = {0}",
                GetSum(5, 4));

            Console.WriteLine("5 + 4 = {0}",
                GetSum("5", "4"));




            // ----- ENUM -----
            // use enum data type 'CarColor', whatever name you want to call you var 'car1'
            // pass in data types value, fom enum list of members
            CarColor car1 = CarColor.Blue;
            CarColor volkswagen = CarColor.Green;

            // call method to get the color as well as the byte assigned to it
            PaintCar(car1);
            PaintCar(volkswagen);

            // --------- Pause console to see the output //
            Console.ReadLine();
        }



        // ----- PASS BY VALUE -----
        // By default values are passed into a method
        // and not a reference to the variable passed
        // Changes made to those values do not effect the
        // variables outside of the method

        // If you assign a value then it is optional to 
        // pass one in
        static int GetSum(int x = 1, int y = 1)
        {
            // switch x and y values
            int temp = x;
            x = y;
            y = temp;

            return x + y;
        }



        // ----- (OUTPUT) OUT PARAMETER -----
        // A parameter marked with out must be assigned 
        // a value in the method
        static void DoubleIt(int x, out int solution)
        {
            solution = x * 2;
        }

        static void TripleIt(int i, out int solution2)
        {
            solution2 = i * 3;
        }



        // ----- PASS BY REFERENCE -----
        // If a variable is passed by reference changes
        // to its value in the method effect it outside
        // of the method
        static void Swap(ref int num1, ref int num2)
        {
            int temp = num1;
            num1 = num2;
            num2 = temp;
        }





        // ----- PARAMS -----
        // The params array must be the last parameter
        // in the list
        static double GetSumMore(params double[] nums)
        {
            double sum = 0;
            foreach (int i in nums)
            {
                sum += i;
            }
            return sum;
        }




        // ----- NAMED PARAMETERS Different Var Types, passed in, in Any Order-----
        static void PrintInfo(string name, int zipCode)
        {
            Console.WriteLine("{0} lives in the zip code {1}", name, zipCode);
        }




        // ----- METHOD OVERLOADING PASSES IN CORRECT VAR FOR ITS PERTAINING METHOD-----
        // both methods have the same name but different variable types passed in
        static double GetSum(double x = 1, double y = 1)
        {
            return x + y;
        }

        // change the variable type, and syntax "" if its a string
        static double GetSum(string x = "1", string y = "1")
        {
            // convert the passed in string types to double
            double dblX = Convert.ToDouble(x);
            double dblY = Convert.ToDouble(y);
            return dblX + dblY;
        }





        // ----- ENUM custom data PAIRS-----
        // An enum is a custom data type with
        // key value PAIRS. They allow you to
        // use symbolic names to represent data
        // The first number is 0 by default unless
        // you change it
        // You can define the underlying 
        // type for the numeric type
        // defined as bytes in this examle to save space
        // or leave it as int as default
        // the numeric value accumilates by 1 
        // for every data type added to the list

        enum CarColor : byte
        {
            Orange = 1,
            Blue,
            Green,
            Red,
            Yellow
        }

        // notice we use CarColor for the data type to be passed in
        static void PaintCar(CarColor cc)
        {
            Console.WriteLine("The car was painted {0} with the code {1}",
                cc, (int)cc);
        }

    }

}

