/*
Inheritance, Aggregations, Virtual, Override, Inner Classes, New, Base, Polymorphism 
*/



// using directives, Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    // models real world objects by defining its attributes (fields)
    // and its capabilities (methods)
    // unlike struct, classes can inherit from classes and hace sub classes
    class Program
    {
        static void Main(string[] args)
        {
            // create new Animal type
            Animal whiskers = new Animal()
            {
                Name = "Whiskers",
                Sound = "Meow"
            };
            
            // create new Dog type
            Dog grover = new Dog()
            {
                Name = "Grover",
                Sound = "Woof",
                Sound2 = "Grrrrr"
            };

            // Demonstrate changing the protected
            // property field, 'protected string sound;' in Animal.cs 
            grover.Sound = "Wooooof";
            
            // see the difference between the MakeSound() methods
            whiskers.MakeSound();
            grover.MakeSound();

            // Define the AnimalIDInfo
            whiskers.SetAnimalIDInfo(12345, "Sally Smith");
            grover.SetAnimalIDInfo(12346, "Paul Brown");

            // get the info from the GetAnimalIDInfo() method in Animal.cs
            whiskers.GetAnimalIDInfo();
            grover.GetAnimalIDInfo();

            // Test the inner class, reference the inner class, below
            Animal.AnimalHealth getHealth = new Animal.AnimalHealth();

            Console.WriteLine("Is my animal healthy : {0}", getHealth.HealthyWeight(11, 46));
            Console.WriteLine("Is my other animal healthy : {0}", getHealth.HealthyWeight(11, 146));

            // hypathetically, we have an array of dogs and one is a subcategory
            // but in the array, a monkey that acts like a dog
            // You can define 2 Animal objects but have
            // one actually be a Dog type. 
            Animal monkey = new Animal()
            {
                Name = "Happy",
                Sound = "Eeeeee"
            };

            // for the dog, spot we called the Dog constructor instead of the animal, and an extra sound2
            Animal spot = new Dog()
            {
                Name = "Spot",
                Sound = "Wooooff",
                Sound2 = "Geerrrr"
            };

            // The problem is that if you call a 
            // function in Animal it won't call
            // the overridden method in Dog unless
            // the method that might be overridden
            // is marked virtual
            spot.MakeSound();
            monkey.MakeSound();
            // This is an example of how Polymorphism
            // allows a subclass to override a method
            // in the super class and even if the 
            // subclass is defined as the super class
            // type the correct method will be called


            Console.ReadLine();
        }

    }

}
