/*
Inheritance, Aggregations, Virtual, Override, Inner Classes, New, Base, Polymorphism 
*/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DerekBanasC_SharpTutorial
{
    // If this class was sealed you couldn't inherit 
    // from it:
    //sealed class Animal
    class Animal
    {
        private string name;

        // A protected field can be changed by
        // a subclass directly
        protected string sound;

        // Inheritance has a "is-a" relationship, a Dog 'is a' Animal
        // while an aggregation or delegate 
        // represents a "Has-a" relationship, a Dog 'has a' ID
        // like we have here with the AnimalIDInfo
        // object.  This is in reference to AnimalIDInfo() in AnimalIDInfo.cs
        // and stores the info in the Animal class
        protected AnimalIDInfo animalIDInfo = new AnimalIDInfo();

        public void SetAnimalIDInfo(int idNum, string owner)
        {
            // pay reference to animalIDInfo, and pass in idNum and owner values
            animalIDInfo.IDNum = idNum;
            animalIDInfo.Owner = owner;
        }

        // provide method to pull the info from
        public void GetAnimalIDInfo()
        {
            Console.WriteLine($"{Name} has the ID of {animalIDInfo.IDNum} and is owned by {animalIDInfo.Owner}");
        }

        // Added virtual so that this method can
        // be overridden by subclasses
        // You must add override to the method in 
        // the subclass
        public virtual void MakeSound()
        {
            // & innerpolation {variable goes here}
            Console.WriteLine($"{Name} says {Sound}");
        }

        // constructor, with name and properties
        public Animal()

        // : receives more than one parameter, and passes up default
        : this("No Name", "No Sound") { }

        // continuing constructor, for only one parameter entered
        public Animal(string name)
            : this(name, "No Sound") { }

        // continuing constructor, for both parameters entered
        public Animal(string name, string sound)
        {
            // assign Name and Sound to whatever was passed in name, sound
            Name = name;
            Sound = sound;
        }

        // creates the Name, property
        public string Name
        {
            get { return name; }
            set
            {
                // filters out number, if entered, references the method to pass a method
                if (value.Any(char.IsDigit))
                {
                    name = "No Name";
                }
                else
                {
                    // alway use default for setters: 'value'
                    name = value;
                }
            }
        }

        // creates the Sound, property
        public string Sound
        {
            // even though Sound is protected, do it the same way as Name
            get { return sound; }
            set
            {
                if (value.Length > 10)
                {
                    sound = "No Sound";
                }
                sound = value;
            }
        }

        // You can create inner classes that are 
        // normally helper classes for the outer 
        // class because it can access private
        // members of the outer class
        // this helper class is within the Animal class
        public class AnimalHealth
        {
            public bool HealthyWeight(double height,
                double weight)
            {
                double calc = height / weight;

                if ((calc >= .18) && (calc <= .27))
                {
                    return true;
                }
                else return false;
            }

        }

    }
}
