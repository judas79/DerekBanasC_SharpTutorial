/*
Well come to part 12 of my C# tutorial. This tutorial will focus on Generic Collections, Generic Methods, Generic Structs, and more on Delegates. 
We are getting near the end and so we are covering some of the really cool things C# can do.
*/


// using directives, Libraries containing functions and objects
using System;
// use dictionaries
using System.Collections.Generic;
// use list arrays
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    // models real world objects by defining its attributes (fields)
    // and its capabilities (methods)
    // unlike struct, classes can inherit from classes and has sub classes
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("LIST\n");
            // Generic collections are type safe 
            // and provide performance benefits

            // You define the data type when defining
            // the generic. This is a dynamically
            // resizing collection
            List<Animal> animalList = new List<Animal>();

            // You can also create a list of standard
            // types like int, 
            // this numList is just an example and not used for anything in this tutorial
            List<int> numList = new List<int>();

            // Add an int object
            numList.Add(24);

            // Add Animal objects to list
            animalList.Add(new Animal() { Name = "Doug" });
            animalList.Add(new Animal() { Name = "Paul" });
            animalList.Add(new Animal() { Name = "Sally" });

            // Insert Animal specifically in index 1
            animalList.Insert(1, new Animal() { Name = "Steve" });

            // Cycle through Animals 
            Console.WriteLine("Before Removing 'Steve'");
            foreach (Animal a in animalList)
            {
                Console.WriteLine(a.Name);

            }

            // Remove member specifically at index 1
            animalList.RemoveAt(1);

            // Get number of Animals
            Console.WriteLine("Num Count of Animals : {0}",
                animalList.Count());

            Console.WriteLine("\nAfter RemoveAt(1) 'Steve removed'");
            // Cycle through Animals
            foreach (Animal a in animalList)
            {
                Console.WriteLine(a.Name);

            }

            // HOMEWORK

            Console.WriteLine("\nHOMEWORK\nStack<T>, Queue<T> Dictionary<TKey, TValue>\n");
            // You can also use Stack<T>, Queue<T>, 
            // Dictionary<TKey, TValue> like I covered
            // previously, T = data type

            // You define the data type when defining
            // the generic. This is a dynamically
            // resizing collection
            Stack<Animal> AnimalStack = new Stack<Animal>();
            Queue<string> AnimalQueue = new Queue<string>();
            Dictionary<string, int> AnimalDict = new Dictionary<string, int>();

      
        
            // add objectd to stack, queue and dictionary types
            AnimalStack.Push(new Animal() { Name = "NameStackChuck"});
            AnimalStack.Push(new Animal() { Name = "NameStackBud"});
            AnimalQueue.Enqueue( "NameQueueCharles" );
            AnimalQueue.Enqueue( "NameQueueDoug" );
            AnimalDict.Add("Fender", 57);
            AnimalDict.Add("Gibson", 77);

            // Remove, pop, Dequeue
            AnimalStack.Pop();
            AnimalQueue.Dequeue();
            AnimalDict.Remove("Gibson");

            Console.WriteLine($"Stack Count: { AnimalStack.Count()}");
            Console.WriteLine($"Queue Count: {AnimalQueue.Count()}");
            Console.WriteLine($"Dictionary Count: {AnimalDict.Count()}\n");


            // search using Contains
            //AnimalStack.Contains(Animal Name="s").ToString();
            Console.WriteLine("Contains NameQueueCharles: " + AnimalQueue.Contains("NameQueueCharles") + " Contains NameQueueDoug: " + AnimalQueue.Contains("NameQueueDoug"));
            Console.WriteLine("Contains Fender: " + AnimalDict.ContainsKey("Fender") + " Contains 57: " + AnimalDict.ContainsValue(57));

            // peek at first to get off stack
            Console.Write("\nAnimalStack Peek: ");
            Console.WriteLine(AnimalStack.Peek());

            Console.Write("\nAnimalQueue Peek: ");
            Console.WriteLine(AnimalQueue.Peek());

            // Cycle through  Stack Queue and Dictionary
            Console.WriteLine("\ncyle through Stack: ");
            
            foreach (Animal a in AnimalStack)
            {
                Console.WriteLine(a.Name);
            
                // cylce through queue
            }
            Console.WriteLine("\ncycle through AnimalQueue:");
            foreach (string a in AnimalQueue)
            {
                Console.WriteLine(a);

            }

            // Cycle through Dictionary key value pairs
            Console.WriteLine("\ncycle through AnimalDict:");
            foreach (KeyValuePair<string, int> item in AnimalDict)
            {
                Console.WriteLine("{0} : {1}",
                    item.Key,
                    item.Value);
            }

            // clear stack and Queue
            AnimalStack.Clear();
            AnimalQueue.Clear();


            // ------------- GENERIC METHODS ----------------

            Console.WriteLine("\nGENERIC METHODS\n");


            // You can use the type parameter <int>
            // if it can be inferred from the parameters
            // passed (Can't do this if there are no 
            // parameters
            int x = 5, y = 4;
            Animal.GetSum<int>(ref x, ref y);

            // It works for strings as well 
            string strX = "5", strY = "4";
            Animal.GetSum(ref strX, ref strY);
            

            //----- Use the generic struct rectangle --------
            Rectangle<int> rec1 = new Rectangle<int>(20, 50);
            Console.WriteLine(rec1.GetArea());

            Rectangle<string> rec2 = new Rectangle<string>("20", "50");
            Console.WriteLine(rec2.GetArea());


            // -------- HOMEWORK class get area of a circle --------
            Circle<int> circ1 = new Circle<int>(10);
            circ1.CircleArea();

            Circle<string> circ2 = new Circle<string>("10");
            circ2.CircleArea();

            // Delegates allow you to reference methods
            // inside a delegate object. The delegate
            // object can then be passed to other 
            // methods that can call the methods assigned
            // to the delegate. It can also stack methods
            // that are called in the specified order

            // Create delegate objects
            Arithmetic add, sub, addSub;

            // Assign just the Add (method) to add
            add = new Arithmetic(Add);

            // Assign just the Subtract (method) to sub
            sub = new Arithmetic(Subtract);

            // Assign add and sub to addSub
            addSub = add + sub;

            // You could also subtract a method
            // sub = addSub - add;

            // Print out results
            Console.WriteLine($"Add {6} & {10}");
            add(6, 10);

            // subtract
            Console.WriteLine($"Sub {10} & {10}");
            sub(10, 10);

            // Call both methods
            Console.WriteLine($"Add & Subtract {10} & {4}");
            addSub(10, 4);

            Console.ReadLine();

        }

        // You can also create generic structs
        // and classes in this same way
        public struct Rectangle<T>
        {
            // Generic fields
            private T width;
            private T length;

            // Generic properties
            public T Width
            {
                get { return width; }
                set { width = value; }
            }

            public T Length
            {
                get { return length; }
                set { length = value; }
            }

            // Generic constructor
            public Rectangle(T w, T l)
            {
                width = w;
                length = l;
            }

            public string GetArea()
            {
                double dblWidth = Convert.ToDouble(Width);
                double dblLength = Convert.ToDouble(Length);
                return string.Format($"{Width} * {Length} = {dblWidth * dblLength}");
            }
        }

        // Generic class
        public class Circle<T>
        {
            // generic field
            private T radius;

            // Generic Properties
            public T Radius
            {
                get { return radius; }
                set { radius = value; }
            }
            // Generic Constructor
            public Circle(T r)
            {
                radius = r;
            }
            // method for access
            public void CircleArea()
            {
                double dblRadius = Convert.ToDouble(Radius);
                double pi = Math.PI;
                Console.WriteLine($"The area of radius {Radius}, is: {pi * (dblRadius * dblRadius)}");
            }          
        }

        //--------------- Delegate -------------

        // Declare a delegate type that performs
        // arithmetic. It defines the return type
        // and the types for attributes 
        public delegate void Arithmetic(double num1, double num2);

        // Methods that will be assigned to the delegate

        public static void Add(double num1, double num2)
        {
            Console.WriteLine($"{num1} + {num2} = {num1 + num2}");
        }

        public static void Subtract(double num1, double num2)
        {
            Console.WriteLine($"{num1} - {num2} = {num1 - num2}");
        }

    }

}
