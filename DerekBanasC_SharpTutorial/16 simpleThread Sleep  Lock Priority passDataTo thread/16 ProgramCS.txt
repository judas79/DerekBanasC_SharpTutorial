/*
In this part of my C# tutorial I’ll cover threads in depth. With threads you can execute multiple pieces of code that share resources and data without corrupting it. 
I cover a simple thread example, sleep, a more advanced with lock, Priority, and how to pass data to a thread.
There are three sections, in this tutorial.  These examples all use our Main method, so uncomment one section at a time, as you comment out the other two sections.
*/

// using directives, Libraries containing functions and objects
using System;
// use dictionaries
using System.Collections.Generic;
// use list arrays
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;
using System.Threading;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // With threads you can execute multiple
    // pieces of code that share resources
    // and data without corrupting it

    // You can't guarantee when a thread
    // executes. You also must lock resources
    // until a thread is done with them
    // or you could corrupt them

    class Program
    {
        // ----- Simple Thread Example -----
/*        
        static void Main(string[] args)
        {
            // Create a thread and start it
            Thread t = new Thread(Print1);
            t.Start();
 
            // This thread method code will run randomly, with thread method below
            for (int i = 0; i < 1000; i++)
                Console.Write(0);
 
            Console.ReadLine();
 
        }
        // method to use thread t, above, runs radomly with method above
        static void Print1()
        {
            for (int i = 0; i < 1000; i++)
                Console.Write(1);
        }
 */       
 /*
        // ----- Sleep Example -----
 
        // With sleep() the thread is suspended
        // for the designated amount of time
        static void Main(string[] args)
        {
            int num = 1;
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine(num);
 
                // Pause for 1 second 1000 ms
                Thread.Sleep(1000);
 
                num++;
            }
 
            Console.WriteLine("Thread Ends");
 
            Console.ReadLine();
        }
        */
  /*
        // ----- Lock Example -----
        // lock keeps other threads from entering 
        // a statement block until another thread
        // leaves
        static void Main(string[] args)
        {
            // create bank account object 
            BankAcct acct = new BankAcct(10);

            // 15 threads in this thread array
            Thread[] threads = new Thread[15];
 
            // CurrentThread gets you the current
            // executing active thread, name our main thread main
            Thread.CurrentThread.Name = "main";
 
            // Create 15 threads that will call for 
            // IssueWithdraw to execute
            for (int i = 0; i < 15; i++)
            {
                // You can only point at methods
                // without arguments and that return nothing
                // create new thread ThreadStart
                // call our bank acct. method IssueWithdraw
                Thread t = new Thread(new 
                    ThreadStart(acct.IssueWithdraw));
                // set names of these threads to the values 
                // of i as it cycles
                t.Name = i.ToString();
                // add them to our thread array
                threads[i] = t;
            }
 
            // Have all these threads try to execute
            for (int i = 0; i < 15; i++)
            {
                // print out names of threads
                // Check if thread has started (IsAlive), it should not be at this point
                Console.WriteLine("Thread {0} Alive : {1}",
                    threads[i].Name, threads[i].IsAlive);
 
                // Start the thread
                threads[i].Start();
 
                // Check if thread has started, once again
                Console.WriteLine("Thread {0} Alive : {1}",
                    threads[i].Name, threads[i].IsAlive);
            }
 
            // Get thread priority (Normal Default)
            // Also Lowest, BelowNormal, AboveNormal
            // and Highest
            // Changin priority doesn't guarantee
            // the highest precedence though
            // It is best to not mess with this
            Console.WriteLine("Current Priority : {0}",
                Thread.CurrentThread.Priority);
 
            Console.WriteLine("Thread {0} Ending",
                Thread.CurrentThread.Name);
 
            Console.ReadLine();
        }
    }
}

// protect bank account from going below 0 
// from user overdrawing
class BankAcct
{
    // create lock down object
    private Object acctLock = new Object();
    double Balance { get; set; }
    string Name { get; set; }

    // constructor for balance property
    public BankAcct(double bal)
    {
        Balance = bal;
    }

    // allow withdrawl from thier bank account
    public double Withdraw(double amt)
    {
        if ((Balance - amt) < 0)
        {
            Console.WriteLine($"Sorry ${Balance} in Account");
            return Balance;
        }

        // locks out any other thread trying to access the acctLock object
        // anything within the curly braces is locked
        lock (acctLock)
        {
            if (Balance >= amt)
            {
                Console.WriteLine("Removed {0} and {1} left in Account",
                amt, (Balance - amt));
                // get updated balance after subtracting amount withdrawn
                Balance -= amt;
            }

            return Balance;

        }
    }

    // You can only point at methods
    // without arguments and that return 
    // nothing
    // this takes out 1 dollar and call the Withdraw method
    public void IssueWithdraw()
    {
        Withdraw(1);
    }
}

 */
// /*
        // ----- Passing Data to Threads -----
        // You can pass arguments to a thread 
        // using a lambda expression

        static void Main(string[] args)
        {
            // points to '=>', CountTo, then, the value to count up to
            Thread t = new Thread(() => CountTo(10));
            t.Start();

            // You can use multiline lambdas, looks like this, 
            // before adding multiline lambda CountTo values
            //  new Thread(() =>{}}).Start();
            new Thread(() =>
            {
                CountTo(5);
                CountTo(6);
            }).Start();

            Console.ReadLine();
        }

        // method receives a number and counts to that number
        static void CountTo(int maxNum)
        {
            for (int i = 0; i <= maxNum; i++)
            {
                Console.WriteLine(i);
            }
        }
    }
}
// */