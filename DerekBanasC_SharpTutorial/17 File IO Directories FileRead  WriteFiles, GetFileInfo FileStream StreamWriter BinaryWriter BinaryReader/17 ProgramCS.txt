/*
This part of my C# tutorial is based completely on File I/O. We’ll learn how to Mess with Directories, Use File to Read and Write to Files, Get FileInfo, 
Use FileStream, Use StreamWriter, Use BinaryWriter & BinaryReader, and much more.

// Start VS with admin rights by
// right clicking it and run as 
// administrator
*/


// using directives, Libraries containing functions and objects
using System;
// use dictionaries
using System.Collections.Generic;
// use list arrays
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for culture specific formatting
using System.Globalization;
using System.Threading;
// Used for file and directory manipulation
using System.IO;
// for string builder
using System.Text;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    class Program
    {
        static void Main(string[] args)
        {
            // ----- MESSING WITH DIRECTORIES -----

            // Get access to the current directory, with the (dot)
            DirectoryInfo currDir = new DirectoryInfo(".");

            // Get access to a directory with a path,
            //use at sign as not to have to use double backslash in address path
            DirectoryInfo dereksDir = new DirectoryInfo(@"C:\Users\judas");

            // Get the directory path
            Console.Write("directory path = ");
            Console.WriteLine(dereksDir.FullName);

            // Get the directory name
            Console.WriteLine($"Directory Name = {dereksDir.Name}");

            // Get the parent directory
            Console.WriteLine($"Parent Directory = {dereksDir.Parent}");

            // What type is it
            Console.WriteLine($"Directory type = {dereksDir.Attributes}");

            // When was it created using CreationTime, includes date
            Console.WriteLine($"Directory created, (date) time = {dereksDir.CreationTime}");

            // Create a directory
            DirectoryInfo dataDir = new DirectoryInfo(@"C:\Users\judas\C#Data");
            dataDir.Create();

            DirectoryInfo test = new DirectoryInfo(@"C:\Users\judas\C#Data\test");
            test.Create();

            string path = @"C:\Users\judas\C#Data\test2";
            DirectoryInfo test2 = new DirectoryInfo(path);
            test2.Create();

            // Delete a directory
             Directory.Delete(@"C:\Users\judas\C#Data\test");

            //----- TEST GET USERS ACCOUNT NAME AND CREATE A FOLDER in that users account -----


            string[] folders = System.IO.Directory.GetDirectories(@"C:\Users\", "*", System.IO.SearchOption.TopDirectoryOnly);

            StringBuilder cleaned = new StringBuilder();
            foreach (string line in folders)
            {
                if (line == @"C:\Users\All Users")
                { }
                else if (line == @"C:\Users\Default")
                { }
                else if (line == @"C:\Users\Default User")
                { }
                else if (line == @"C:\Users\Public")
                { }
                else
                {
                    Console.WriteLine($"User : {line}");
                    cleaned.Append(line.ToString());
                    string path2 = cleaned.ToString()+ "\\C#Data\\test0";
                    

                    foreach (var item in path2.ToString().Split('\n'))
                    {
                        Console.WriteLine(item.ToString());
                        DirectoryInfo test0 = new DirectoryInfo(item.ToString());
                        test0.Create();
                    }
                }
            }            
            Console.WriteLine();
                


            // ----- SIMPLE FILE READING & WRITING -----


            // Write a string array to a text file
            string[] customers =
            {
                "Bob Smith",
                "Sally Smith",
                "Robert Smith"
            };

            string textFilePath = @"C:\Users\judas\C#Data\testfile1.txt";
            ;
            // Write the customers array, using path to testfile1.txt
            File.WriteAllLines(textFilePath,
                customers);

            // Read strings from file textFilePath which includes the path to testfile1.txt
            Console.WriteLine($"\nCustomers in testfile1.txt : ");
            foreach (string cust in File.ReadAllLines(textFilePath))
            {
                Console.WriteLine(cust);
            }

            /* From comments area (DOESS NOT WORK)
            string textFilePath5 = @"C:\Users\judas\C#Data\textfile5.txt";

            int j = 0;
            int[] x = { };
            int[] y = { };

            Console.WriteLine($"\ncolumn x column y in textfile5.txt : ");
            foreach (string line in File.ReadAllLines(textFilePath5))
            {
                string[] s = line.Split('\t');
                x[j] = Convert.ToInt32(s[0], 10);
                y[j++] = Convert.ToInt32(s[1], 10);
            }
            */
            Console.WriteLine();

            // ----- GETTING FILE DATA -----

            DirectoryInfo myDataDir = new DirectoryInfo(@"C:\Users\judas\C#Data");

            // Get all txt files 
            FileInfo[] txtFiles = myDataDir.GetFiles("*.txt",
                SearchOption.AllDirectories);

            // Number of matches
            Console.WriteLine("Number of txt file Matches : {0} txt files",
                txtFiles.Length);

            Console.WriteLine();
            foreach (FileInfo file in txtFiles)
            {
                // Get file name
                Console.Write(file.Name + " ");

                // Get bytes in file
                Console.WriteLine(file.Length + " bytes");
            }
            Console.WriteLine();

            // ----- FILESTREAMS -----
            // FileStream is used to read and write a byte
            // or an array of bytes. 

            string textFilePath2 = @"C:\Users\judas\C#Data\testfile2.txt";

            // Create and open a file
            FileStream fs = File.Open(textFilePath2,
                FileMode.Create);

            string randString = "This is a random string";

            // Convert randString to a byte array
            byte[] rsByteArray = Encoding.Default.GetBytes(randString);

            // Write to file by defining the byte array,
            // the index to start writing from and length
            fs.Write(rsByteArray, 0,
                rsByteArray.Length);

            // Move back to the beginning of the file,
            // then create a filebyte array
            // then we will read it, from the begining
            fs.Position = 0;

            // Create byte array to hold file data
            byte[] fileByteArray = new byte[rsByteArray.Length];

            // Put bytes in array
            for (int i = 0; i < rsByteArray.Length; i++)
            {
                fileByteArray[i] = (byte)fs.ReadByte();
            }

            // Convert from bytes to string and output
            Console.WriteLine(Encoding.Default.GetString(fileByteArray));

            // Close the FileStream
            fs.Close();

            // ----- STREAMWRITER / STREAMREADER -----
            // These are best for reading and writing strings

            string textFilePath3 = @"C:\Users\judas\C#Data\testfile3.txt";

            // Create a text file
            StreamWriter sw = File.CreateText(textFilePath3);

            // Write to a file without a newline
            sw.Write("This is a random ");

            // Write to a file with a newline
            sw.WriteLine("sentence.");

            // Write another
            sw.WriteLine("This is another sentence.");

            // Close the StreamWriter
            sw.Close();

            // Open the file for reading
            StreamReader sr = File.OpenText(textFilePath3);

            // Peek returns the next character as a unicode
            // number. Use Convert to change to a character
            Console.WriteLine("Peek : {0}, as unicode : {1}",
                Convert.ToChar(sr.Peek()), sr.Peek());

            // Read to a newline
            Console.WriteLine("sr.ReadLine() 1st String : {0}",
                sr.ReadLine());

            // Read to the end of the file starting
            // where you left off reading
            Console.WriteLine("sr.ReadToEnd() Everything else : {0}",
                sr.ReadToEnd());

            sr.Close();

            // ----- BINARYWRITER / BINARYREADER -----
            // Used to read and write data types 
            string textFilePath4 = @"C:\Users\judas\C#Data\testfile4.dat";

            // Get the file
            FileInfo datFile = new FileInfo(textFilePath4);

            // Open the file
            BinaryWriter bw = new BinaryWriter(datFile.OpenWrite());

            // Data to save to the file
            string randText = "Random Text";
            int myAge = 42;
            double height = 6.25;

            // Write data to a file
            bw.Write(randText);
            bw.Write(myAge);
            bw.Write(height);
            bw.Write(22);
            bw.Write("string");

            bw.Close();

            // Open file for reading
            BinaryReader br = new BinaryReader(datFile.OpenRead());

            // Output data, must definde the data type that was entered 
            // in the same order it was entered in
            Console.WriteLine(br.ReadString());
            Console.WriteLine(br.ReadInt32());
            Console.WriteLine(br.ReadDouble());
            Console.WriteLine(br.ReadInt32());
            Console.WriteLine(br.ReadString());

            br.Close();

            Console.ReadLine();
        
  
        }
    }
}