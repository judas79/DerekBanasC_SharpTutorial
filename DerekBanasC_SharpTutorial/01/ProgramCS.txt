// Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;

// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    class Program
    {
        // this is where all the execution starts (begins)
        // static means function belongs to this class, and can be executed without having a object
        // void means no returned value, if int instead of void, int returns 1 for successful execution or -1 if not
        // string array values can be passed in as args, arrays are boxes containing values
        static void Main(string[] args)
        {
            // Writeline means new line at the end
            Console.WriteLine("hello\n");

            /*
             *  To simulate passing comand line arguements, into our Main method, in solution explore, right click our .csproj file
             *  and choose properites, the debug, then add 1-4 with a space between each number, in the Command line arguements field.
            */
            // test the passed in from command line arguements
            for (int i = 0; i < args.Length; i++)
            {
                // write arg number, . then tab then ARG, then value of i will be written in the location {0} occupies and 
                // args[i] value written in the place that {1} occupies, then test replace {3} (double spaced \n and line in writeline)
                Console.WriteLine(args[i] + ". \tArg {0} : {1} - {2}", i, args[i], "test\n");
            }

            // use a string array to get all the args passed in from the command line args, console.  
            string[] sArgs = Environment.GetCommandLineArgs();

            // print out as one long string separated by comas and spaces, this will include the path to you string sArgs.
            Console.WriteLine(string.Join(", ", sArgs));

            // call method below from this Main function
            SayHello();
            DataTypes();
            ConvertDataTypes();
            DateTime();
            BigNumbers();
            ConsoleOutputFormats();
            ThingsForStrings();

            // trick to keep console open to have time to read writeline info,
            // hit enter button on keyboard to return
            Console.WriteLine("press enter to continue");
            Console.Read();


        }

        // new function method, fancy say hello to user input name
        private static void SayHello()
        {
            string Name = "";
            Console.WriteLine("Whats your Name");
            Name = Console.ReadLine();
            Console.WriteLine("hello {0}", Name);
        }


        //  data types
        private static void DataTypes()
        {
            Console.WriteLine("int 32 Maximum value : {0}", int.MaxValue);
            Console.WriteLine("int 32 Minimum value : {0}", int.MinValue);

            // not as accurate as decimal, 
            // needs hash mark in parenthesis when converting to string to print out all numbers instead of 11111 +308 example
            Console.WriteLine("double Maximum value : {0}", double.MaxValue.ToString("#"));

            // accurate to 28 decimal point, with a M at the end
            decimal DecPIVal = 3.14159M;
            decimal Number = 3.1111111111112222222222222222233333333333333333333M;
            Console.WriteLine("Decimal : PI + Number = {0}", DecPIVal + Number);

            // floats have six decimals at the end and terminated with an f
            float fNum = 3.123456f;
            Console.WriteLine("float :  {0}", fNum);

            // Other Data Types
            // byte : 8-bit unsigned int 0 to 255
            // char : 16-bit unicode character
            // sbyte : 8-bit signed int -128 to 127
            // short : 16-bit signed int -32,768 to 32,767
            // uint : 32-bit unsigned int 0 to 4,294,967,295
            // ulong : 64-bit unsigned int 0 to 18,446,744,073,709,551,615
            // ushort : 16-bit unsigned int 0 to 65,535
        }

        // convert from string to other data types, not arrays
        private static void ConvertDataTypes()
        {
            string sExample = "true";
            string sExample2 = "1234";
            string sExample3 = "4";
            string sExample4 = "34";

            bool bFromString = bool.Parse(sExample);
            int iFromString = int.Parse(sExample2);
            char cFromString = char.Parse(sExample3);     // string must be 1 char long
            byte byteFromString = byte.Parse(sExample4);  // string must be 1 byte long
            float fFromString = float.Parse(sExample2);
            short shFromString = short.Parse("12345");    // string must be 5 chars or less

            Console.WriteLine("bool {0}", bFromString);
            Console.WriteLine("int {0}", iFromString);
            Console.WriteLine("char {0}", cFromString);
            Console.WriteLine("byte {0}", byteFromString);
            Console.WriteLine("float {0}", fFromString);
            Console.WriteLine("short {0}", shFromString);
        }

        private static void DateTime()
        {
            DateTime MyDateTime = new DateTime(1874, 12, 21);
            Console.WriteLine("Day of the week : {0}", MyDateTime.DayOfWeek);
            Console.WriteLine("new DateTime : {0}", MyDateTime.Date);

            // add days, months and years to current MyDateTime value
            MyDateTime = MyDateTime.AddDays(1);
            MyDateTime = MyDateTime.AddMonths(1);
            MyDateTime = MyDateTime.AddYears(1);

            Console.WriteLine("Day of the week : {0}", MyDateTime.DayOfWeek);
            Console.WriteLine("new DateTime : {0}\n", MyDateTime.Date);

            TimeSpan LunchTime = new TimeSpan(12, 20, 0);

            // change lunchtime to 15 minutes earlier
            LunchTime = LunchTime.Subtract(new TimeSpan(0, 15, 0));
            Console.WriteLine("Lunchtime : {0}\n", LunchTime.ToString());
        }

        // to use really big numbers go into the Project tab then in Add Reference, then under Assemblies, put a checkmark next to 
        // System Numerics, press OK.  Add using System.Numerics; to our namespaces and libraries
        private static void BigNumbers()
        {
            BigInteger bigInteger = BigInteger.Parse("123456123456123456123456123456");
            Console.WriteLine("bigInteger * 5 = {0}\n", bigInteger * 5);
        }

        // format output from console in different ways for different kinds
        private static void ConsoleOutputFormats()
        {
            Console.WriteLine("{1}0:c{2} for Currency : {0:c} raw : 23.456", 23.456, "{", "}");
            Console.WriteLine("{1}0:d5{2} for Pad with zeroes : {0:d5} raw 123", 123, "{", "}");
            Console.WriteLine("{1}0:f3{2} for three decimals : {0:f3} raw 123.4567", 123.4567, "{", "}");
            Console.WriteLine("{1}0:n4{2} for Commas : {0:n4} raw 6789\n", 6789, "{", "}");
        }

        // different things you can do to strings
        
        private static void ThingsForStrings()
        {
            // Strings store a series of characters
            string randString = "This is a string";
            string randString2 = "Das be is string";

            // Get number of characters in string
            Console.WriteLine("String Length : {0}", randString.Length);

            // Check if string contains other string, true false
            Console.WriteLine("String Contains is : {0}",
                randString2.Contains("is"));

            // Index of string match first instance of 'is'
            Console.WriteLine("Index of is : {0}",
                randString2.IndexOf("is"));

            // Remove number of characters starting at an index
            Console.WriteLine("Remove string : {0}",
                randString.Remove(10, 6));

            // Add a string starting at an index, then the rest of the string continues after insert
            Console.WriteLine("Insert String : {0}",
                randString.Insert(10, "short "));

            // Replace character in a string with another string
            Console.WriteLine("Replace String : {0}",
                randString.Replace("string", "sentence\n"));

            // Compare strings and ignore case -1 is if the A is before B, which it is
            // < 0 : str1 preceeds str2
            // = : Zero
            // > 0 : str2 preceeds str1
            Console.WriteLine("Compare A to B : {0}",
                String.Compare("A", "B", StringComparison.OrdinalIgnoreCase));

            // this would give a 1, because A is located to the right of B
            Console.WriteLine("Compare B to A : {0}",
                String.Compare("B", "A", StringComparison.OrdinalIgnoreCase));

            // B compared to B is 0
            Console.WriteLine("Compare A to B : {0}",
                String.Compare("B", "B", StringComparison.OrdinalIgnoreCase));

            // Check if strings are equal, case is ignored
            Console.WriteLine("A = a : {0}",
                String.Equals("A", "a", StringComparison.OrdinalIgnoreCase));

            // Add padding left,  periods and the strings characters add up to 20
            Console.WriteLine("Pad Left : {0}",
                randString.PadLeft(20, '.'));

            // Add padding amount includes character so total is 20, '.' on right then writes Stuff
            Console.WriteLine("Pad Right : {0} Stuff",
                randString.PadRight(20, '.'));

            // Trim whitespace, empty spaces all of them at begining or after the last character
            Console.WriteLine("Trim : {0}",
                randString.Trim());

            // Make all letters uppercase
            Console.WriteLine("Uppercase : {0}",
                randString.ToUpper());

            // Make all letters lowercase
            Console.WriteLine("Lowercase : {0}",
                randString.ToLower());

            // Use Format to create strings
            string newString = String.Format("{0} saw a {1} {2} in the {3}",
                "Paul", "rabbit", "eating", "field");

            // You can add newlines with \n and join strings with +
            Console.Write(newString + "\n");

            // Other escape characters
            // \' \" \\ \t \a

            // Verbatim strings ignore escape characters, print them to console as raw
            Console.Write(@"Exactly What I Typed");

            // Excepts input up until a newline, but it is here to 
            // keep the console open after output
            // Read() excepts a single character
            Console.ReadLine();
        }
    }
}
