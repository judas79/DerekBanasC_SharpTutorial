/*
8 cs files:
// ---------- IDrivable.cs -------
// ---------- Vehicle.cs ---------
// ---------- Program.cs ---------
// ---------- IElectronicDevice.cs 
// ---------- Television.cs ------
// ---------- ICommand.cs --------
// ---------- PowerButton.cs -----
// ---------- TVRemote.cs --------

In this part of my C# tutorial we’ll look at Interfaces using both a simple example and another that is rather complex. We’ll also look at Abstract Methods, Inheriting an Interface, 
How to Create Flexible Designs, and the Command Design Pattern.
*/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DerekBanasC_SharpTutorial
{
    class PowerButton : ICommand
    {
        // You can refer to instances using
        // the interface
        IElectronicDevice device;

        // Now we get into the specifics of
        // what happens when the power button
        // is pressed.
        public PowerButton(IElectronicDevice device)
        {
            this.device = device;
        }

        public void Execute()
        {
            device.On();
        }

        // You can provide a way to undo
        // an action just like the power 
        // button does on a remote
        public void Undo()
        {
            device.Off();
        }

        // HOMEWORK
        public void VolIncrement()
        {
            device.VolumeUp();
        }
        public void VolDecrement()
        {
            device.VolumeDown();
        }
    }
}
