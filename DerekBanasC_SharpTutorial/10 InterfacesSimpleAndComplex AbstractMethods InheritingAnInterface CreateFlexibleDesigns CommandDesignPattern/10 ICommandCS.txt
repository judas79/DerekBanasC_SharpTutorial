/*
8 cs files:
// ---------- IDrivable.cs -------
// ---------- Vehicle.cs ---------
// ---------- Program.cs ---------
// ---------- IElectronicDevice.cs 
// ---------- Television.cs ------
// ---------- ICommand.cs --------
// ---------- PowerButton.cs -----
// ---------- TVRemote.cs --------

In this part of my C# tutorial we’ll look at Interfaces using both a simple example and another that is rather complex. We’ll also look at Abstract Methods, Inheriting an Interface, 
How to Create Flexible Designs, and the Command Design Pattern.
*/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DerekBanasC_SharpTutorial
{
    interface ICommand
    {
        // We can model what happens when
        // a button is pressed for example
        // a power button. By breaking
        // everything down we can add
        // an infinite amount of flexibility
        void Execute();
        void Undo();

        // HOMEWORK
        void VolIncrement();
        void VolDecrement();
    }
}
