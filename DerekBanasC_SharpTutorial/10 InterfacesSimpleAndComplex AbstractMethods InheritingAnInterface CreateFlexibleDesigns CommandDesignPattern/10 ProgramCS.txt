/*
8 cs files:
// ---------- IDrivable.cs -------
// ---------- Vehicle.cs ---------
// ---------- Program.cs ---------
// ---------- IElectronicDevice.cs 
// ---------- Television.cs ------
// ---------- ICommand.cs --------
// ---------- PowerButton.cs -----
// ---------- TVRemote.cs --------

In this part of my C# tutorial we’ll look at Interfaces using both a simple example and another that is rather complex. We’ll also look at Abstract Methods, Inheriting an Interface, 
How to Create Flexible Designs, and the Command Design Pattern.
*/


// using directives, Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    // models real world objects by defining its attributes (fields)
    // and its capabilities (methods)
    // unlike struct, classes can inherit from classes and has sub classes
    class Program
    {
        static void Main(string[] args)
        {
            // Create a Vehicle object, pass in info.
            // its a buick, has 4 wheels, and goes 160 MPH
            Vehicle buick = new Vehicle("Buick",
                4, 160);

            // Check if Vehicle implements 
            // IDrivable
            if (buick is IDrivable)
            {
                buick.Move();
                buick.Stop();
            }
            else
            {
                Console.WriteLine("The {0} can't be driven", buick.Brand);
            }



            // ------------------- IElectronicDevice ------------------ //
            // We are now modeling the act of
            // picking up a remote, aiming it
            // at the TV, clicking the power
            // button and then watching as
            // the TV turns on and off

            // Pick up the TV remote
            IElectronicDevice TV = TVRemote.GetDevice();

            // Create the power button
            PowerButton powBut = new PowerButton(TV);

            // Turn the TV on and off with each 
            // press
            powBut.Execute();
            powBut.Undo();

            // HOMEWORK
            powBut.VolIncrement();
            powBut.VolDecrement();

            Console.ReadLine();

        }

    }

}
