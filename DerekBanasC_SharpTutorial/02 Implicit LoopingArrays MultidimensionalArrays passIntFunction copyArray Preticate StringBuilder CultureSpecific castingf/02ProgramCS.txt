// Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    class Program
    {
        // this is where all the execution starts (begins)
        // static means function belongs to this class, and can be executed without having a object
        // void means no returned value, if int instead of void, int returns 1 for successful execution or -1 if not
        // string array values can be passed in as args, arrays are boxes containing values
        static void Main(string[] args)
        {
            ImplicitTyping();
            ArrayTypes();

            Console.ReadLine();
        }


        // ********** implicit types of variables ************
        static void ImplicitTyping()
        {
            // Let VS determine what type of variable is that you declare as implicid
            var implicitInt = 1234;
            Console.WriteLine("implicit var type is : {0} {1}", implicitInt, implicitInt.GetType());

            var implicitstr = "abcd";
            Console.WriteLine("implicit var type is : {0} {1}", implicitstr, implicitstr.GetType());

            var implicithex = (0xDD);
            Console.WriteLine("implicit var type is : {0} {1} {2}", implicithex.ToString(""), implicithex.ToString("X"), implicithex.GetType());

            var implicitchar = 'x';
            Console.WriteLine("implicit var type is : {0} {1}", implicitchar.ToString(), implicitchar.GetType());

            Console.WriteLine(decimal.MaxValue);

            var implicitdouble = .792281625142643375935439503352;
            Console.WriteLine("implicit var type is : {0} {1}", implicitdouble.ToString(), implicitdouble.GetType());
        }


        // ********** Array types ************
        static void ArrayTypes()
        {
            // arrays many boxes with the same type of data type with different values in each
            // first member is numbered as key [0] and increment as they are added to, within a fixed size defined
            int[] favNums = new int[32];

            // assign value to first key in array
            favNums[0] = 123;
            favNums[1] = 456;

            Console.WriteLine("{0}{1}", favNums[0].ToString(), favNums[1].ToString());

            // 2 ways to assign to a string array
            string[] customerInfo = { "Bob", "Chuck", "Dick" };
            var intArray = new[] { 1, 2, 3 };
            var strArray = new[] { "Mark", "Tim", "4!" };

            // store mixed data types in object, which is the base for all variable data types
            object[] mixedDataTypes = { "@", 66, 'a', "Will", 3.444 };

            Console.WriteLine("{0}\t\t {1}\t\t {2}\t\t {3}\t\t {4}",
                mixedDataTypes[0], mixedDataTypes[1], mixedDataTypes[2], mixedDataTypes[3], mixedDataTypes[4]);

            Console.WriteLine("{0}  {1}   {2} {3}  {4}",
                mixedDataTypes[0].GetType(), mixedDataTypes[1].GetType(), mixedDataTypes[2].GetType(), mixedDataTypes[3].GetType(), mixedDataTypes[4].GetType());

            // get array size
            Console.WriteLine("array total size : {0}", mixedDataTypes.Length);

            // iterate though the array
            for (int i = 0; i < mixedDataTypes.Length; i++)
            {
                Console.WriteLine("array index key number : {0}\t value : {1}\t type : {2}", i, mixedDataTypes[i], mixedDataTypes[i].GetType());

                if (mixedDataTypes[i].GetType().ToString() == "System.String")
                {
                    // only gets last string element, because it is a string
                    string strElementsFromArray = mixedDataTypes[i].ToString();
                    Console.WriteLine("Last string strElementsFromArray : {0}", strElementsFromArray);
                }
            }

            // Multi-dimensional arrays ['firstnum', scndnum] firstnum(s) amount content in array stacked vertically,
            // scndnum represents the amounts stacked horizontally, a height and width grid, starts at [0,0]
            string[,] stringArray2by2 = new string[2, 2] { { "Bob", "Smith" }, { "Chuck", "Yeager" } };

            Console.WriteLine("stringArray2by2 final element in array : {0}", stringArray2by2[1, 1]);

            // cycle thru multi-dimmensional array, uses GetLength(0) then GetLength(1)
            Console.Write("stringArray2by2 first in array : ");

            for (int i = 0; i < stringArray2by2.GetLength(0); i++)
            {
                for (int j = 0; j < stringArray2by2.GetLength(1); j++)
                    Console.Write(" {0} ", stringArray2by2[i, j]);
            }
            Console.WriteLine();

            // ***************************   NOT WORKING
            // the amount of multi-dimensional array matricies requires 3 number [hgt,wdt, amount]
            // cycle thru multi-dimmensional array, uses GetLength(0) then GetLength(1)
            string[,] stringArray2by2x2 = new string[2, 2] { { "Bob", "Smith" }, { "Chuck", "Yeager" } };

            Console.Write("stringArray2by2 first in array : ");

            for (int i = 0; i < stringArray2by2x2.GetLength(0); i++)
            {
                for (int j = 0; j < stringArray2by2x2.GetLength(1); j++)
                    Console.Write(" {0} ", stringArray2by2x2[i, j]);
            }
            Console.WriteLine("\n");

            // ************************* using foreach and passing an int array to a function

            // int array
            int[] randomInts = { 1, 4, 3, 2, 5 };


            // pass randomInts to function and have descriptive phrase
            PrintArray(randomInts, "for each");

            // reversed array
            Array.Reverse(randomInts);
            PrintArray(randomInts, "reversed array");

            // sort contents of randomInts in numerical order
            Array.Sort(randomInts);
            PrintArray(randomInts, "sorted array");

            // search for particular number in int array
            Console.WriteLine("search index for 2 : found at index {0}", Array.IndexOf(randomInts, 2));

            // set array value by its index (value, index number)
            randomInts.SetValue(6, 4);
            Console.WriteLine("set array value by its index number; index 4 is now = {0}", randomInts[4]);

            //**************** copy part of an existing array into another array

            // ints we will be using
            int[] iaSrcArray = { 1, 2, 3, 4 };
            int[] iaDestArray = new int [ 2 ];
            int iStartIndex = 0;
            int iLength = 2;

            // source arrays' name, source arrays' starting point, destination arrays' name, destination arrays' starting point, destination arrays' length
            Array.Copy(iaSrcArray, iStartIndex, iaDestArray,iStartIndex, iLength);

            // pass destinations array into our PrintArray for itteration, and copy to describe what this did
            PrintArray(iaDestArray, "Copied to iaDestArray ");

            // **************** Create instance function to copy an array

            // Create instance function to copy an array to another array, type is int and indecies count are 10
            Array aAnotherArray = Array.CreateInstance(typeof(int), 10);

            // copy from source array into, and starting at index 5 of aAnotherArray, will padd empty indexes with value of 0
            iaSrcArray.CopyTo(aAnotherArray,5);
            foreach (int item in aAnotherArray)
            {
                Console.WriteLine("{0} : {1}", "copied using CreateInstance", item);
            }

            // ***************** define preticate, search for an element that matches certain conditions

            // int array for preticate T/F method outside of Main()
            int[] iaTFNumbers = { 1, 11, 22,23 };

            // only returns the first value found, (int array, our function name)
            Console.WriteLine("first element > 10 : {0} at index : {1}", Array.Find(iaTFNumbers, GreaterThan10), Array.FindIndex(iaTFNumbers, GreaterThan10));
            Console.WriteLine("how many elements > 10 : {0}", Array.FindAll(iaTFNumbers, GreaterThan10).Length);

            // Find all requires string.Join for this to work
            Console.WriteLine("All > 10 : {0}", string.Join(",", Array.FindAll(iaTFNumbers, GreaterThan10)));

            //****************** string builder allows change to a block of text, without making a new copy

            // default gives you 16 characters of space if amount isn't defined
            StringBuilder SB = new StringBuilder("string here");

            // define amount of characters to reserve '256'
            StringBuilder SB2 = new StringBuilder("define amount of characters", 256);

            // get the size amount for the StringBuilder strings
            Console.WriteLine("Capacity SB : {0}", SB.Capacity);
            Console.WriteLine("Capacity SB2 : {0}", SB2.Capacity);

            Console.WriteLine("Length SB : {0}", SB.Length);

            // add to string builder string

            SB2.AppendLine("....AppendLine with \\n\nnew line");
            Console.WriteLine(SB2);

            //**************** define culture specific formatting using System.Globalization;
            CultureInfo enUS = CultureInfo.CreateSpecificCulture("en-US");

            string sBestCustomer = "Bob Smith";

            // append your SB2, with string sBestCustomer value
            SB2.AppendFormat(enUS, "Best Customer {0}", sBestCustomer);
            Console.WriteLine(SB2 + "\n");

            // replace text in your StringBuilder
            SB2.Replace("Best", "Greatest");
            Console.WriteLine(SB2);

            SB2.Clear();
            Console.WriteLine("Cleared SB2 = {0}", SB2);

            SB2.Append("more string text");
            Console.WriteLine(SB2);

            Console.WriteLine("Does SB == SB2 {0} : ", SB.Equals(SB2));

            // insert text starting at index 11 into SB2
            Console.WriteLine(SB2.Insert(11, " What are you looking at, "+ sBestCustomer + "?  "+ SB.Insert(11, "?")));

            // remove starting at index 5 remove next 7 characters
            Console.WriteLine(SB2.Remove(5, 7));

            // ****************** Casting (converting) from one data type to another

            long lOne = 1234;

            // cast long var as int
            int iOne = (int)lOne;
            Console.WriteLine("lOne is a: {0}, iOne is a {1}", lOne.GetType(), iOne.GetType());


        }

        // pass to a function outside of Main function, receives int[] (iArray) named array and, 
        // also receives a string named message
        static void PrintArray(int[] iArray, string sMessage)
        {
            // cycle through passed in iArray using int k to store its value, pass in string sMessage as it is
            foreach (int item in iArray)
            {
                Console.WriteLine("{0} : {1}", sMessage, item);
            }

        }

        // define preticate function returns T/ F
        private static bool GreaterThan10(int iVal)
        {            
            return iVal > 10;
        }
            

    }
}
