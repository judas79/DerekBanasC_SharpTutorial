/*
Classes, OPP, Methods, Fields, Constructors, Static Classes, Methods and Fields, Structs and Nullable Types.
*/

// using directives, Libraries containing functions and objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
// for big numbers
using System.Numerics;
// for string builder
using System.Text;
// for culture specific formatting
using System.Globalization;


// Namespace to define globaly unique objects
namespace DerekBanasC_SharpTutorial
{
    // classes define the variables and methods used by objects
    // models real world objects by defining its attributes (fields)
    // and its capabilities (methods)
    // unlike struct, classes can inherit from classes and hace sub classes
    class Program
    {
        // this is where all the execution starts (begins)
        // static means function belongs to this class, and can be executed without having a object
        // void means no returned value, if int instead of void, int returns 1 for successful execution or -1 if not
        // string array values can be passed in as args, arrays are boxes containing values
        static void Main(string[] args)
        {
            //------- STRUCT PASSES BY VALUE NOT REFERENCE
            // Create a Rectangle struct
            // It's a struct not a class.
            // So those values don't belong to an object 
            // They're plain values 
            Rectangle rect1;

            // Add values to it and run the Area method, 
            // these value are not effected by the chages below
            rect1.length = 200;
            rect1.width = 50;
            Console.WriteLine("Area of rect1 : {0}",
                rect1.Area());

            // another way is to, use a constructor to create a Rectangle
            Rectangle rect2 = new Rectangle(100, 40);

            // If you assign one Rectangle to another
            // you are setting the values and not
            // creating a reference, so the 
            // methods, will not be effected by these changes
            rect2 = rect1;      // does not effect the values or the method
            rect1.length = 33;  // does not effect the values or the method

            Console.WriteLine("rect2.length : {0} enterd : (100, 40)  area rect2 : {1}",
                rect2.length, rect2.Area());

            Rectangle rect3 = new Rectangle();
            rect3 = rect1;     // does not effect the values or the method
            rect3.length = 22; // does not effect the values or the method

            Console.WriteLine("rect3.length : {0} entered: () area rect3 : {1}",
                rect3.length, rect2.Area());





            // ----- OBJECT ORIENTED PROGRAMMING -----
            // A class models real world objects by
            // defining their attributes (fields) and
            // capabilities (methods)
            // Then unlike with structs you can 
            // inherit from a class and create more
            // specific subclass types

            // Add a class in VS in 'main menu':  Project -> Add Class

            // Create an Animal object
            // You could also assign values like
            // fox.name = "Red"
            // this calls the Animal 'constructer'  for us
            Animal fox = new Animal()
            {
                name = "Red Fox",
                sound = "Raaaw"

                // the name and sound could alternatively be written like this (didn't work for me)
                //fox.name = "Red";
                //fox.sound = "Raaw";
            };

            // Call the static method GetNumAnimals()
            // to see how many have been crated
            // how to refer to static methods: first the class name, then the method name
            Console.WriteLine("# of Animals {0}",
                Animal.GetNumAnimals());

            // call the  MakeSound() method in our Animal.cs file
            fox.MakeSound();

            // Parrot Animal
            Animal Parrot = new Animal()
            {
                name = "Yappy",
                sound = "eat me"
            };
            Console.WriteLine("# of Animals {0}",
                    Animal.GetNumAnimals());
            Parrot.MakeSound();


            

            // Call our method, in our ShapeMath.cs
            // and pass the length and width to it
            Console.WriteLine("Area of Rectangle 5 x 6 : {0}",
                ShapeMath.GetArea("rectangle", 5, 6));
            
            // the input order of base and height, doesn't matter
            Console.WriteLine("Area of Triangle height and base 5  6 : {0}",
                ShapeMath.GetArea("triangle", 5, 6));

            Console.WriteLine("Area of Cirlce radius 2 : {0}",
                ShapeMath.GetArea("circle", 2));

            // ----- NULLABLE TYPES -----
            // Data types by default cannot have a
            // value of null. Often null is needed
            // when you are working with databases
            // and you can create a null type by 
            // adding a ? to the definition
            int? randNum = null;

            // Check for null
            if (randNum == null)
            {
                Console.WriteLine("randNum is null");
            }

            // Another check for null
            if (!randNum.HasValue)
            {
                Console.WriteLine("randNum is null");
            }


            // --------- Pause console to see the output //
            Console.ReadLine();
        }



        // ----- STRUCTS -----
        // outside of Main()
        // A struct is a user defined type that
        // contain multiple fields and methods

        struct Rectangle
        {
            // define fields that describe the rectangle
            public double length;
            public double width;

            // the same name as the struct
            // You can create a constructor method
            // that will set the values for fields, above
            // after passing them in, this initializes the struct
            public Rectangle(double l = 1, double w = 1)
            {
                length = l;
                width = w;
            }

            // method to return the area as a double
            public double Area()
            {
                return length * width;
            }
        }
    }
}

